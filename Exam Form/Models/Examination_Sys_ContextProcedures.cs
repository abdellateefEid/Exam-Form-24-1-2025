// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Exam_Form.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Exam_Form.Models
{
    public partial class Examination_Sys_Context
    {
        private IExamination_Sys_ContextProcedures _procedures;

        public virtual IExamination_Sys_ContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Examination_Sys_ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IExamination_Sys_ContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class Examination_Sys_ContextProcedures : IExamination_Sys_ContextProcedures
    {
        private readonly Examination_Sys_Context _context;

        public Examination_Sys_ContextProcedures(Examination_Sys_Context context)
        {
            _context = context;
        }

        public virtual async Task<List<CorrectExamResult>> CorrectExamAsync(int? Student_Id, int? Exam_Id, DataTable Answers, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Student_Id",
                    Value = Student_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Exam_Id",
                    Value = Exam_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Answers",
                    Value = Answers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[AnswerTable]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CorrectExamResult>("EXEC @returnValue = [dbo].[CorrectExam] @Student_Id = @Student_Id, @Exam_Id = @Exam_Id, @Answers = @Answers", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GenerateExamResult>> GenerateExamAsync(int? Course_Id, int? Num_Questions, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Course_Id",
                    Value = Course_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Num_Questions",
                    Value = Num_Questions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GenerateExamResult>("EXEC @returnValue = [dbo].[GenerateExam] @Course_Id = @Course_Id, @Num_Questions = @Num_Questions", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GenerateExamThenInsertItResult>> GenerateExamThenInsertItAsync(int? Course_Id, int? Student_Id, int? Exam_Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Course_Id",
                    Value = Course_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Student_Id",
                    Value = Student_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Exam_Id",
                    Value = Exam_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GenerateExamThenInsertItResult>("EXEC @returnValue = [dbo].[GenerateExamThenInsertIt] @Course_Id = @Course_Id, @Student_Id = @Student_Id, @Exam_Id = @Exam_Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetStudentCoursesAndExamsResult>> GetStudentCoursesAndExamsAsync(int? StudentId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StudentId",
                    Value = StudentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetStudentCoursesAndExamsResult>("EXEC @returnValue = [dbo].[GetStudentCoursesAndExams] @StudentId = @StudentId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertStudentAnswerAsync(int? Student_Id, int? Exam_Id, int? Question_Id, string Student_Ans, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Student_Id",
                    Value = Student_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Exam_Id",
                    Value = Exam_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Question_Id",
                    Value = Question_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Student_Ans",
                    Size = -1,
                    Value = Student_Ans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertStudentAnswer] @Student_Id = @Student_Id, @Exam_Id = @Exam_Id, @Question_Id = @Question_Id, @Student_Ans = @Student_Ans", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
